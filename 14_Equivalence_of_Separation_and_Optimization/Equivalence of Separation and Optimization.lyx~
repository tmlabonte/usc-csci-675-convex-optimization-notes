#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
theorems-ams
algolyx
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Equivalence of Separation and Optimization
\end_layout

\begin_layout Section
Equivalence for Polytopes
\end_layout

\begin_layout Standard
We will show that the optimization of linear functions over a polytope reduces
 to implementing a separation oracle for the polytope, and vice versa; that
 is, the two tasks are polynomial time equivalent.
 Given a polytope 
\begin_inset Formula $P$
\end_inset

, we can define the linear optimization problem:
\end_layout

\begin_layout Itemize
Input: linear objective 
\begin_inset Formula $\boldsymbol{c}\in\mathbb{R}^{n}$
\end_inset


\end_layout

\begin_layout Itemize
Output: 
\begin_inset Formula $\arg\max_{\boldsymbol{x}\in P}\boldsymbol{c}^{\intercal}\boldsymbol{x}$
\end_inset


\end_layout

\begin_layout Standard
We also have the linear separation problem:
\end_layout

\begin_layout Itemize
Input: 
\begin_inset Formula $\boldsymbol{y}\in\mathbb{R}^{n}$
\end_inset


\end_layout

\begin_layout Itemize
Output: Decide that 
\begin_inset Formula $\boldsymbol{y}\in P$
\end_inset

 or else find 
\begin_inset Formula $\boldsymbol{h}\in\mathbb{R}^{n}$
\end_inset

 such that 
\begin_inset Formula $\boldsymbol{h}^{\intercal}\boldsymbol{x}<\boldsymbol{h}^{\intercal}\boldsymbol{y}$
\end_inset

 for all 
\begin_inset Formula $\boldsymbol{x}\in P$
\end_inset

.
\end_layout

\begin_layout Standard
For example, in the MST LP, optimization corresponds to finding the MST,
 while separation corresponds to finding a dense subgraph which violates
 the LP constraints.
\end_layout

\begin_layout Theorem
Consider a family 
\begin_inset Formula $\mathcal{P}$
\end_inset

 of polytopes of the form 
\begin_inset Formula $P={\bf A}\boldsymbol{x}\preceq\boldsymbol{b}$
\end_inset

 described implicitly using 
\begin_inset Formula $\langle P\rangle$
\end_inset

 bits and satisfying 
\begin_inset Formula $\langle a_{ij}\rangle,\langle b_{i}\rangle\leq poly(\langle P\rangle,n)$
\end_inset

.
 Then, the separation problem is solvable in 
\begin_inset Formula $poly(\langle P\rangle,n,\langle\boldsymbol{y}\rangle)$
\end_inset

 if and only if the optimization problem is solvable in 
\begin_inset Formula $poly(\langle P\rangle,n,\langle c\rangle)$
\end_inset

.
 We say that such a 
\begin_inset Formula $\mathcal{P}$
\end_inset

 is solvable.
\end_layout

\begin_layout Proof
We already saw that separation implies optimization by the Ellipsoid Algorithm.
 For the other direction, we will have to utilize polars.
 Recall that 
\begin_inset Formula $S^{\circ}=\{\boldsymbol{y}:\boldsymbol{y}^{\intercal}\boldsymbol{x}\leq1\text{ }\forall\boldsymbol{x}\in S\}$
\end_inset

 for some convex convex 
\begin_inset Formula $S\subseteq\mathbb{R}^{n}$
\end_inset

 containing the origin.
 Recall also that 
\begin_inset Formula $S^{\circ}$
\end_inset

 is bounded and contains the origin and 
\begin_inset Formula $S^{\circ\circ}=S$
\end_inset

.
 Given a polytope represented as 
\begin_inset Formula ${\bf A}\boldsymbol{x}\preceq\boldsymbol{1}$
\end_inset

, its polar is the convex hull of the rows of 
\begin_inset Formula ${\bf A}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Lemma
Separation over 
\begin_inset Formula $S$
\end_inset

 reduces in constant time to optimization over 
\begin_inset Formula $S^{\circ}$
\end_inset

, and vice versa because 
\begin_inset Formula $S^{\circ\circ}=S$
\end_inset

.
\end_layout

\begin_layout Proof
Given a vector 
\begin_inset Formula $\boldsymbol{x}$
\end_inset

, we must check 
\begin_inset Formula $\boldsymbol{x}\in S$
\end_inset

 and if it is not, output a separating hyperplane.
 We know 
\begin_inset Formula $\boldsymbol{x}\in S\iff\boldsymbol{y}^{\intercal}\boldsymbol{x}\leq\boldsymbol{1}\text{ }\forall\boldsymbol{y}\in S^{\circ}$
\end_inset

 by definition.
 This is equivalent to 
\begin_inset Formula $\boldsymbol{x}\in S\iff\sup_{\boldsymbol{y}\in S^{\circ}}\boldsymbol{y}^{\intercal}\boldsymbol{x}\leq1$
\end_inset

, but this is exactly saying that 
\begin_inset Formula $\boldsymbol{x}$
\end_inset

 is the objective of the optimization problem.
 Thus if we find 
\begin_inset Formula $\boldsymbol{y}\in S^{\circ}$
\end_inset

 such that 
\begin_inset Formula $\boldsymbol{y}^{\intercal}\boldsymbol{x}>1$
\end_inset

, then 
\begin_inset Formula $\boldsymbol{y}$
\end_inset

 is a separating hyperplane because 
\begin_inset Formula $\boldsymbol{y}^{\intercal}\boldsymbol{z}\leq1<\boldsymbol{y}^{\intercal}\boldsymbol{x}\text{ }\forall\boldsymbol{z}\in S$
\end_inset

.
 This is optimization over 
\begin_inset Formula $S^{\circ}$
\end_inset

, so we can solve it using the Ellipsoid Algorithm!
\end_layout

\end_deeper
\begin_layout Proof
Technical Note 1: We need to 
\begin_inset Quotes eld
\end_inset

center
\begin_inset Quotes erd
\end_inset

 the polytope about the origin, but we can do that by running the Ellipsoid
 Algorithm to find a strictly feasible point in 
\begin_inset Formula $P$
\end_inset

, then change our coordinate system to center that point.
\end_layout

\begin_layout Proof
Technical Note 2: To apply the Ellipsoid Algorithm to 
\begin_inset Formula $P^{\circ}$
\end_inset

, we need polynomial bit complexity of the facts of 
\begin_inset Formula $P^{\circ}$
\end_inset

, but this follows from the polynomial bit complexity of the vertices of
 
\begin_inset Formula $P$
\end_inset

 (since facets of the polar correspond to vertices of the polytope).
\end_layout

\begin_layout Section
Equivalence beyond Polytopes
\end_layout

\begin_layout Standard
The equivalence of separation and optimization approximately extends to
 arbitrary convex sets as long as you can circumscribe the convex set.
 This allows you to solve weak separation and weak optimization problems,
 and allows an approximation 
\begin_inset Formula $\epsilon$
\end_inset

 in both feasibility and optimality.
 These problems are both solvable in polynomial time if and only if the
 other is, with terms for circumscription accuracy and 
\begin_inset Formula $\log(1/\epsilon)$
\end_inset

.
\end_layout

\begin_layout Standard
This implies that there must exist operations which preserve solvability.
 Given that you can efficiently optimize over convex sets 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

, it turns out that you can:
\end_layout

\begin_layout Itemize
Optimize over 
\begin_inset Formula $P\cap Q$
\end_inset

: You can separate over 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 individually, therefore you can separate over 
\begin_inset Formula $P\cap Q$
\end_inset

 which by the equivalence of separation and optimization implies that you
 can optimize over 
\begin_inset Formula $P\cap Q$
\end_inset

.
 This has applications in colorful spanning tree, cardinality constrained
 matching, etc.
\end_layout

\begin_layout Itemize
Optimize over 
\begin_inset Formula $P\cup Q$
\end_inset

: Simply optimize over each set individually, then take the better result
 of the two.
 This is equivalent to optimizing over 
\begin_inset Formula $convHull(P\cup Q)$
\end_inset

, because taking the convex hull will not add any vertices.
 So by the equivalence of separation and optimization, there exists a polynomial
 time separation oracle for 
\begin_inset Formula $convHull(P\cup Q)$
\end_inset

.
 Note that it must be a constant or polynomially sized union, not an exponential
ly sized union like TSP.
\end_layout

\begin_layout Standard
Note that the sets 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 are not explicit, just described by a separation oracle, so we don't even
 need to know what the sets actually are to optimize over their intersection
 or union! A final implication is that there exists a polynomial time algorithm
 for the Constructive Caratheodory problem: Given a point 
\begin_inset Formula $\boldsymbol{x}\in P$
\end_inset

, where 
\begin_inset Formula $P\in\mathbb{R}^{n}$
\end_inset

 is a solvable polytope, write 
\begin_inset Formula $\boldsymbol{x}$
\end_inset

 as a convex combination of 
\begin_inset Formula $n+1$
\end_inset

 vertices of 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\end_body
\end_document
